cmake_minimum_required(VERSION 3.1)
set(CppFiles cliqueTree.cpp stochasticEnumeration.cpp stochasticEnumeration2.cpp sampfordBruteForce.cpp conditionalPoisson.cpp sampfordConditionalPoissonRejective.cpp semiDeterministicSampling.cpp sampfordFromParetoNaive.cpp pareto.cpp)
set(HeaderFiles cliqueTree.h stochasticEnumeration.h sampford.h numericType.h conditionalPoisson.h semiDeterministicSampling.h pareto.h)
if(USE_NAUTY)
	list(APPEND CppFiles stochasticEnumerationNauty.cpp horvitzThompson.cpp)
	list(APPEND HeaderFiles stochasticEnumerationNauty.h horvitzThompson.h)
endif()

add_library(chordalGraphCommon STATIC ${CppFiles} ${HeaderFiles})
target_include_directories(chordalGraphCommon PUBLIC ${Boost_INCLUDE_DIRS} ${PROJECT_SOURCE_DIR}/chordalGraphCommon ${IGRAPH_INCLUDES} ${boostGraphExt_include})
target_link_libraries(chordalGraphCommon PUBLIC ${Boost_LIBRARIES} mpfr)

target_compile_definitions(chordalGraphCommon PUBLIC BOOST_ALL_NO_LIB BOOST_ALL_DYN_LINK)
if(USE_NAUTY)
	target_link_libraries(chordalGraphCommon PUBLIC nauty)
	target_compile_definitions(chordalGraphCommon PUBLIC HAS_NAUTY)
endif()

if(WIN32)
	set_target_properties(chordalGraphCommon PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR} PDB_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
	target_link_libraries(chordalGraphCommon PUBLIC mpir)
else()
	target_compile_features(chordalGraphCommon PUBLIC cxx_rvalue_references)
endif()
